//---------------------------------------------------------------------------

#pragma hdrstop

#include "UDicolavectorcircular.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

//added
#include <iostream>
//METODO PRIVADO
direccion DicolaVC::siguiente(int dir){
	if(dir == MAXDVC - 1)
		return 0;
	else
		return dir + 1;
}
// METODOS PUNLICOS DE LA CLASE DicolaVC
DicolaVC::DicolaVC(){
	fin=0;
	ini=0;	v = new int[MAXDVC];}

bool DicolaVC::Vacia(){
	return ini==fin;
}

void DicolaVC::Poner(int E){
	 if (siguiente(siguiente(fin)) != ini){
		v[fin]=E;
		fin = siguiente(fin);
	 }
}

void DicolaVC::Sacar(int &E){
	if (!Vacia()){
		E= v[ini];
		ini = siguiente(ini);
	}
}

int DicolaVC::Primero(){	if (!Vacia()) {		return v[ini];
	}}void DicolaVC::Poner_frente(int E){	Poner(E);	for (int i = fin; i > 0; i--){			v[i] = v[i - 1];
	}
	v[ini] = E;
	fin++;}   /*void DicolaVC::Sacar_Final(int &E){
	l->recupera(l->primero(),E);
	l->suprime(l->primero());
}

int DicolaVC::Ultimo(){	int E;	l->recupera(l->primero(),E);	return E;}       */string DicolaVC::Mostrar(){
	string k="<< ";
	int E;
	DicolaVC* aux=new DicolaVC();
	while (!Vacia()){
		Sacar(E);
		cout<<"INI: "<<ini<<endl;
		aux->Poner(E);
		k=k+to_string(E);
		if (!Vacia()) {
			k+=',';
		}
	}
	while (!aux->Vacia()){
		aux->Sacar(E);
		Poner(E);
	}
	return k+" <<";
}