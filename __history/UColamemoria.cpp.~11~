//---------------------------------------------------------------------------

#pragma hdrstop

#include "UColamemoria.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//added
#include <iostream>

ColaM::ColaM(){
	mem=new CSMemoria();
	int ini=-1;
	int fin=-1;
}

bool ColaM::Vacia(){
	return ini==NULO;
}

void ColaM::Poner(int E){
	int aux=mem->new_espacio(datoC); //Pedir Espacio de memoria para Nodo
	if (aux!=NULO) {
		mem->poner_dato(aux,elementoC,E);
		mem->poner_dato(aux,sigC,NULO);
		if (Vacia()){
			ini=aux;
			fin=aux;
		}else{
			mem->poner_dato(fin,sigC,aux);
			fin=aux;   //fin=al espacio en la cual comenzo el string
		}
	}else{
		cout<<"Error\n";
	}
	mem->mostrar_memoria();    //test
	cout<<"ini1: "<<ini<<endl; //test
	cout<<"Fin1: "<<fin<<endl; //test
	cout<<"espacio ocupado: " <<mem->espacio_ocupado()<<endl;
	cout<<"espacio disponible: " <<mem->espacio_disponible()<<endl;
}

void ColaM::Sacar(int &E){
	if (!Vacia()) {
	   //	cout<<"init: "<<ini<<endl;
		E=mem->obtener_dato(ini,elementoC);//45
		int x=ini;
	   //	cout<<"initxx: "<<x<<endl;
		//ini=mem->obtener_dato(ini,sigC);  ///////
		mem->delete_espacio(x);
		mem->mostrar_memoria();    //test
		cout<<"ini1: "<<ini<<endl; //test
		cout<<"Fin1: "<<fin<<endl; //test
		cout<<"espacio ocupado: " <<mem->espacio_ocupado()<<endl;
		cout<<"espacio disponible: " <<mem->espacio_disponible()<<endl;
	}
}

int ColaM::Primero(){	if (!Vacia()) {		return mem->obtener_dato(ini,elementoC);
	}else{		cout<<"Error\n";
	}}string ColaM::Mostrar(){
	int x=mem->espacio_ocupado()/2;
	int g=0;
	string k="COLA: << ";
	while (x>0){
		k=k+to_string(mem->obtener_dato(g,elementoC));
		if (x>1) {
			k=k+',';
		}
		x--;
		g+=2;
	}
	cout<<k<<" <<"<<endl;
}
